{"version":3,"sources":["example.js","App.js","reportWebVitals.js","index.js"],"names":["Example","React","useState","visible","setVisible","Grid","columns","Column","Checkbox","checked","label","children","onChange","e","data","Sidebar","Pushable","as","Segment","Menu","animation","direction","icon","inverted","onHide","vertical","width","Item","Icon","name","header","Pusher","basic","Header","Image","src","CalculateTaskProgress","a","fetch","res2","json","totalTaskCompletedCount","res","totalTaskCount","console","log","myCoolDiv","document","createElement","id","style","color","child","createTextNode","textAlign","appendChild","getElementById","setTimeout","removeChild","App","Container","margin","Component","AdditionalContainer","className","class","tabindex","display","marginLeft","marginRight","onClick","data-value","data-total","data-percent","List","todos","setTodos","settotalTaskCount","text","setText","date","setDate","category","setCategory","fetchTodoCountsOfCompletedAndTotal","fetchTodos","addTodo","alert","method","headers","body","JSON","stringify","desc","done","due","tag","deleteAllTodos","StartTemplateToDoList","useEffect","items","map","todo","_id","styles","type","value","target","placeholder","props","deleteTodo","toggleDone","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.512099ea.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  Checkbox,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Menu,\n  Segment,\n  Sidebar,\n} from 'semantic-ui-react'\n\nfunction Example ()  {\n  const [visible, setVisible] = React.useState(false)\n\n  return (\n    <div>\n    <Grid columns={1}>\n      <Grid.Column>\n        <Checkbox\n          checked={visible}\n          label={{ children: <code>visible</code> }}\n          onChange={(e, data) => setVisible(data.checked)}\n        />\n      </Grid.Column>\n\n      <Grid.Column>\n        <Sidebar.Pushable as={Segment}>\n          <Sidebar\n            as={Menu}\n            animation='overlay'\n            direction='left'\n            icon='labeled'\n            inverted\n            onHide={() => setVisible(false)}\n            vertical\n            visible={visible}\n            width='thin'\n          >\n            <Menu.Item as='a'>\n              <Icon name='home' />\n              Home\n            </Menu.Item>\n            <Menu.Item as='a'>\n              <Icon name='gamepad' />\n              Games\n            </Menu.Item>\n            <Menu.Item as='a'>\n              <Icon name='camera' />\n              Channels\n            </Menu.Item>\n          </Sidebar>\n\n          <Sidebar\n            as={Menu}\n            animation='overlay'\n            direction='right'\n            inverted\n            vertical\n            visible={visible}\n          >\n            <Menu.Item as='a' header>\n              File Permissions\n            </Menu.Item>\n            <Menu.Item as='a'>Share on Social</Menu.Item>\n            <Menu.Item as='a'>Share by E-mail</Menu.Item>\n            <Menu.Item as='a'>Edit Permissions</Menu.Item>\n            <Menu.Item as='a'>Delete Permanently</Menu.Item>\n          </Sidebar>\n\n          <Sidebar.Pusher>\n            <Segment basic>\n              <Header as='h3'>Application Content</Header>\n              <Image src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\n            </Segment>\n          </Sidebar.Pusher>\n        </Sidebar.Pushable>\n      </Grid.Column>\n    </Grid>\n    </div>\n  )\n}\n\nexport default Example\n    ","import React, {useState, useEffect, Component} from 'react'\n// import ReactDOM, { render } from 'react-dom';\n// import Dropdown from './dropdownmenu/Dropdown.js';\n// import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n// import $ from 'jquery'; \n// import { Button, Progress } from 'semantic-ui-react'\n// for side bar, the following 2 imports are for the animatedside bar\nimport { Container } from \"semantic-ui-react\";\nimport Example from \"./example\";\n// import {\n//   Checkbox,\n//   Grid,\n//   Header,\n//   Icon,\n//   Image,\n//   Menu,\n//   Segment,\n//   Sidebar,\n// } from 'semantic-ui-react'\n\n\nvar counter = 0;\nvar prevDiv;\nvar prevParent;\nconst CalculateTaskProgress = async () => {\n  counter++;\n  // we'll make 2 Get requests here. First, to find total number of tasks and then to find the number of compelted tasks.\n  // second request\n  const res2 = await fetch('http://localhost:3001/todosTaskCompletedCount');\n  // await console.log(\"CalculateTaskProgress totalTaskCompletedCount is \", await res2.json());\n  totalTaskCompletedCount =  await res2.json();\n  \n  //first fetch request goes here:\n  const res = await fetch('http://localhost:3001/todosTaskCount');\n  // await console.log(\"CalculateTaskProgress totalTaskCount is \", await res.json());\n  totalTaskCount =  await res.json() ;\n  // settotalTaskCount(totalTaskCount);\n  // settotalTaskCompletedCount(totalTaskCompletedCount);\n  // return {\n  //   'totalTaskCount': totalTaskCount, 'totalTaskCompletedCount': totalTaskCompletedCount\n  // }\n  console.log(totalTaskCompletedCount, \"out of \", totalTaskCount)\n\n\n\n\n  var myCoolDiv = document.createElement(\"div\");\nmyCoolDiv.id = \"MyCoolDiv\";\nmyCoolDiv.style.color = \"#2b0808\";\nvar child =   document.createTextNode(totalTaskCompletedCount+ \" out of \"+ totalTaskCount + \" Tasks Completed - You're \" + 100*totalTaskCompletedCount/totalTaskCount + \" % done!\");\nchild.textAlign = 'center';\nchild.color = 'green'\nmyCoolDiv.appendChild(\n  child\n);\ndocument.getElementById(\"playerContainer\").appendChild(myCoolDiv);\n\nsetTimeout(function(){ \n    // No need for this, we already have it from the above:\n    // var myCoolDiv = document.getElementById(\"MyCoolDiv\");\n    document.getElementById(\"playerContainer\").removeChild(myCoolDiv);\n}, 1500);\n\n\n\n\n\n\n  // var div = document.createElement(\"div\");\n  // div.innerHTML = totalTaskCompletedCount + ' out of ' + totalTaskCount + ' Tasks Completed!';\n  // if (prevDiv) {\n  //   prevDiv.parentNode.removeChild(prevDiv);\n  // } // if it does not exist, \n  // prevDiv = div\n  // // prevParent = document.body;\n  // document.body.appendChild(div);\n  // // document.body.appendChild(div);\n  // // document.body.appendChild(div);\n\n  // console.log('done')\n  // document.body.removeChild(div);\n};\n\n\n// function App() {\n  class App extends Component {\n    render() {\n  return (\n    <div>\n    <Container style={{ margin: 20 }}>\n      <List />\n    </Container>\n\n    <Container style={{ margin: 20 }}>\n      <AdditionalContainer />\n    </Container>\n\n    <Container style={{ margin: 20 }}>\n      <Example />\n    </Container>\n\n    </div>\n  ) }\n}\n\nlet totalTaskCount = 0;\nlet totalTaskCompletedCount = 0;\n\n// const Example = () => {\n//   const [visible, setVisible] = React.useState(false)\n\n//   return (\n//     <div>\n//       <Grid columns={1}>\n//       <Grid.Column>\n//         <Checkbox\n//           checked={visible}\n//           label={{ children: <code>visible</code> }}\n//           onChange={(e, data) => setVisible(data.checked)}\n//         />\n//       </Grid.Column>\n\n//       <Grid.Column>\n//         <Sidebar.Pushable as={Segment}>\n//           <Sidebar\n//             as={Menu}\n//             animation='overlay'\n//             direction='left'\n//             icon='labeled'\n//             inverted\n//             onHide={() => setVisible(false)}\n//             vertical\n//             // visible={false}\n//             visible={visible}\n//             width='thin'\n//           >\n//             <Menu.Item as='a'>\n//               <Icon name='home' />\n//               Home\n//             </Menu.Item>\n//             <Menu.Item as='a'>\n//               <Icon name='gamepad' />\n//               Games\n//             </Menu.Item>\n//             <Menu.Item as='a'>\n//               <Icon name='camera' />\n//               Channels\n//             </Menu.Item>\n//           </Sidebar>\n\n//           <Sidebar\n//             as={Menu}\n//             animation='overlay'\n//             direction='right'\n//             inverted\n//             vertical\n//             // visible={true}\n//             visible={visible}\n//           >\n//             <Menu.Item as='a' header>\n//               File Permissions\n//             </Menu.Item>\n//             <Menu.Item as='a'>Share on Social</Menu.Item>\n//             <Menu.Item as='a'>Share by E-mail</Menu.Item>\n//             <Menu.Item as='a'>Edit Permissions</Menu.Item>\n//             <Menu.Item as='a'>Delete Permanently</Menu.Item>\n//           </Sidebar>\n\n//           <Sidebar.Pusher>\n//             <Segment basic>\n//               <Header as='h3'>Application Content</Header>\n//               <Image src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\n//             </Segment>\n//           </Sidebar.Pusher>\n//         </Sidebar.Pushable>\n//       </Grid.Column>\n//     </Grid>\n//     </div>\n//   )\n\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst AdditionalContainer = () => {\n  // const [todos, setTodos] = useState([]);\n  // var [totalTaskCount, settotalTaskCount] = useState([]);\n  // var [totalTaskCompletedCount, settotalTaskCompletedCount] = useState([]);\n  // const [text, setText] = useState([]);\n  // const [date, setDate] = useState([]);\n  // const [category, setCategory] = useState([]);\n  return (\n    <div>\n  <div className=\"ui horizontal divider\" style={{'marginTop':'50px'}}>Your Progress</div>\n  <div class=\"ui animated fade inverted orange button\" tabindex=\"0\" style={{display:'block', marginLeft:'auto', marginRight:'auto'}} onClick={CalculateTaskProgress}>\n      <div class=\"visible content\" onClick={CalculateTaskProgress}>Calculate Your Progress</div>\n      <i class=\"hidden content\">\n        Drumroll please...\n      </i>\n    </div>\n    <div id=\"playerContainer\"  className=\"label\" style={{display:'block', marginLeft:'auto', marginRight:'auto'}}> </div>\n\n\n  <div className=\"ui active progress\" data-value=\"57\" data-total=\"200\" data-percent=\"57\" width=\"57%\" style={{\"transitionDuration\": \"200ms\", \"width\": \"100%\"}}>\n    <div className=\"bar\" style={{color:\"green\"}}>\n      <div className=\"progress\">6%</div>\n      {/* <Progress percent={25} /> */}\n    </div>\n\n    <div className=\"ui indicating progress success\" data-value=\"1\" data-total=\"200\" id=\"example5\" data-percent=\"100\">\n            <div className=\"bar\" style={{\"transitionDuration\": \"200ms\", \"width\": \"100%\"}}>\n              <div className=\"progress\">100%</div>\n            </div>\n    </div> \n\n</div>\n<div className=\"label\" style={{'textAlign':'center'}}>Task Completion in Progress... We've got some work to do!</div>\n<div className=\"ui horizontal divider\" style={{'marginTop':'50px'}}>Additional Features to Potentially Add</div>\n<button className=\"ui teal right labeled icon button\" >\n<ul style={{textAlign: 'left'}}>\n  <li>Drop down menu of Categories</li>\n  <li>Priority Tags (High, Medium, Low)</li>\n  <li>Live Progress Bar</li>\n  <li>Transposed Task View - organizing tasks: alphabetically, based on priority, based on date, based on tag</li>\n</ul>\n</button>\n</div>\n  )\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The two functions below are how we use a GET function from the backend \n// to display them onto our FRONT END BOOM ------------------------------------------------\nconst List = () => {\n  const [todos, setTodos] = useState([]);\n  var [totalTaskCount, settotalTaskCount] = useState([]);\n  var [totalTaskCompletedCount, settotalTaskCompletedCount] = useState([]);\n  const [text, setText] = useState([]);\n  const [date, setDate] = useState([]);\n  const [category, setCategory] = useState([]);\n\n// makeAjax request to FETCH TODOS counts ===================\n    const fetchTodoCountsOfCompletedAndTotal = async () => {\n      // we'll make 2 Get requests here. First, to find total number of tasks and then to find the number of compelted tasks.\n      // second request\n      const res2 = await fetch('http://localhost:3001/todosTaskCompletedCount');\n      await console.log(\"totalTaskCompletedCount is \", await res2.json());\n      totalTaskCompletedCount =  res2;\n      \n      //first fetch request goes here:\n      const res = await fetch('http://localhost:3001/todosTaskCount');\n      await console.log(\"totalTaskCount is \", await res.json());\n      totalTaskCount =  res ;\n      // settotalTaskCount(totalTaskCount);\n      // settotalTaskCompletedCount(totalTaskCompletedCount);\n      return {\n        'totalTaskCount': totalTaskCount, 'totalTaskCompletedCount': totalTaskCompletedCount\n      }\n    };\n\n  // makeAjax request to FETCH TODOS ===================\n  const fetchTodos = async () => {\n    //fetch request goes here:\n    fetchTodoCountsOfCompletedAndTotal();\n    const res = await fetch('http://localhost:3001/todos');\n    setTodos(await res.json()); // turn response into json\n  };\n\n  // makeAjax request to Add TODOS -- onclick ===================\n  const addTodo = async () => {\n    //fetch request goes here:\n    if (!text || !date || !category ) {\n      alert('Task cannot be added until you fill in name, category, and date');\n      return;\n    } else {\n      const res = await fetch('http://localhost:3001/todos', {\n        method:'POST',\n        headers: {\n          'Content-Type': 'application/json'\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: JSON.stringify({ desc: text, done: false, due: date, tag: category})\n      }\n    );\n    // currently, after we add a TODO, we must manuallly referesh our page to see the new Todos.\n    // We'll insert the following lines in order to have a an aut-refers\n    // assume the todo is successfully added a(and dont do any errro hadnling)\n    fetchTodos(); // this wil fetch them and reflect them ont othe scren\n    settotalTaskCount(totalTaskCount);\n    setText('');\n  }};\n\n    // // deleteAllTodos\n    const deleteAllTodos = async () => {\n      await fetch(`http://localhost:3001/todos`, {\n        method:'DELETE'\n      });\n      fetchTodos();\n    }\n\n    const StartTemplateToDoList = async () => {\n      deleteAllTodos();\n      await fetch(`http://localhost:3001/todos/standardTemplate`, {\n        method:'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      fetchTodos();\n    }\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const items = todos.map(todo => <Item todo={todo} key={todo._id} fetchTodos={fetchTodos}/> )\n  \n  // drop down variables\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n// used to be ui centered card\n  return <div className=\"ui segment\" styles={{'padding-left':'100px'}}>\n  <div className=\"content\" styles={{'width':'1600px'}}>\n    <h1 style={{'textAlign':'center'}}>My To-Do List</h1>\n    {/* <div className=\"header\">My To-Do List</div> */}\n    <div style={{'display':'block', 'marginLeft':'auto', 'marginRight': 'auto' }}>\n        <button className=\"positive ui button\" onClick={StartTemplateToDoList} style={{'display':'block', 'marginLeft':'auto', 'marginRight': 'auto' }}>Start Standardized ToDo List</button>\n        <button className=\"negative ui button\" onClick={deleteAllTodos} style={{'display':'block', 'marginLeft':'auto', 'marginRight': 'auto', 'marginTop': '5px', 'marginBottom': '5px' }}>Clear & Start Afresh</button>\n    </div>\n    \n  </div>\n  <div className=\"content\" styles={{'width':'1600px'}}>\n\n    <div className=\"ui relaxed divided list\" styles={{'width':'1600px'}}>\n      {items}\n    </div>\n  </div>\n\n  <div className=\"ui horizontal divider\" style={{'marginTop':'50px'}}>Add More Tasks</div>\n  <div className=\"extra content\" style={{display:'flex',   'alignItems': 'center', 'justifyContent': 'center'}}>\n    <div className=\"fluid ui action input\">\n          <div className=\"ui cards\">\n            <div className=\"card\">\n            <button className=\"ui teal right labeled icon button\" >\n                {/* <List style={{color:\"blue\"}}> */}\n                <input type=\"text\" value={text} onChange={(e) => \n                  setText(e.target.value)} \n                  placeholder=\"Task Name\"/>\n                    {/* <br></br> */}\n                    <input type=\"text\" value={category} onChange={(e) => setCategory(e.target.value)} placeholder=\"Task Category\"/>\n                    <input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} /> \n                  {/* </List> */}\n            </button>\n\n            \n                  </div>\n                {/* </div> */}\n\n              \n          </div>\n      <button className=\"ui teal right labeled icon button\" onClick={addTodo}><i className=\"plus icon\"></i>add</button>\n    </div>\n  </div>\n\n</div>\n\n};\n// const CalculateTaskProgress = (props) => {\n//   totalTaskCount = props.todo;\n\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Item = (props) => {\n  const {done , desc, _id, tag, due} = props.todo;\n  const deleteTodo = async () => {\n    await fetch(`http://localhost:3001/todos/${_id}`, {\n      method:'DELETE'\n    }\n    );\n    props.fetchTodos();\n  }\n\n  const toggleDone = async () => {\n    await fetch(`http://localhost:3001/todos/${_id}`, {\n      method:'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ done: !done, desc, due, tag})\n    });\n\n    props.fetchTodos();\n  };\n\n\n  return <div className='item'>\n    {\n      done ? \n      <i className=\"left floated green check square outline icon\" onClick={toggleDone}></i> : \n      <i className=\"left floated square outline icon\" onClick={toggleDone}></i>\n    }\n    {\n      done ?\n      <del > {desc}</del> :  <p > {desc}</p>\n    }\n    {/* {totalTaskCount} */}\n    {/* {done} */}\n    <i className=\"right floated red trash icon\" onClick={deleteTodo} style={{height:\"10px\"}} ></i>\n    <a className=\"right floated ui basic image label\" style={{'marginRight':\"13px\"}}><i className=\"blue calendar icon\" style={{'marginRight':\"20px\"}}/>{due}</a>\n    { (tag == \"Academics\") ?\n          <button a className=\"right floated ui teal tag label\"  style={{\"marginRight\": \"10px\"}} >{tag}</button> :\n          (tag == \"Career\") ?\n          <button a className=\"right floated ui orange tag label\"  style={{\"marginRight\": \"10px\"}} >{tag}</button> :\n          (tag == \"Finance\") ?\n          <button a className=\"right floated ui pink tag label\"  style={{\"marginRight\": \"10px\"}} >{tag}</button> :\n          (tag == \"Community\") ?\n          <button a className=\"right floated ui purple tag label\"  style={{\"marginRight\": \"10px\"}} >{tag}</button> :\n          (tag == \"Home\") ?\n          <button a className=\"right floated ui blue tag label\"  style={{\"marginRight\": \"10px\"}} >{tag}</button> :\n          <button a className=\"right floated ui green tag label\"  style={{\"marginRight\": \"10px\"}} >{tag}</button>\n    }\n    \n     \n    {/* <button a className=\"right floated ui teal tag label\"  style={{\"marginRight\": \"10px\"}} >{tag}</button> */}\n\n  </div>\n}\n\n//  ------------------------------------------------ ------------------------------------------------\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}